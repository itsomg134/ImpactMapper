# AI Legal Document Simplifier - Docker Compose Configuration
# This file sets up the complete development and production environment
version: '3.8'

networks:
  legal-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  nginx_cache:
    driver: local

services:
  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  
  # React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: legal-ai-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=http://localhost:4000/api/v1
      - REACT_APP_WS_URL=ws://localhost:4000
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - uploads:/app/public/uploads
    networks:
      - legal-ai-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BACKEND API SERVICES
  # =============================================================================
  
  # Node.js API Server
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: legal-ai-api
    ports:
      - "4000:4000"
    environment:
      # Application
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=4000
      - API_BASE_URL=/api/v1
      
      # Database
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-legalai123}@postgres:5432/${POSTGRES_DB:-legal_ai_db}
      - REDIS_URL=redis://redis:6379/0
      
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      
      # AWS Services
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-legal-docs}
      
      # File Storage (MinIO)
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - MINIO_BUCKET_NAME=legal-documents
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-minimum-32-chars}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret}
      - BCRYPT_ROUNDS=12
      
      # Email
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - legal-ai-network
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Job Processor
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: legal-ai-worker
    environment:
      # Same environment as API
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-legalai123}@postgres:5432/${POSTGRES_DB:-legal_ai_db}
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - ./backend:/app
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - legal-ai-network
    depends_on:
      - postgres
      - redis
      - minio
    restart: unless-stopped
    deploy:
      replicas: 2

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: legal-ai-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-legal_ai_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-legalai123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - legal-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-legal_ai_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: legal-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - legal-ai-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Document Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: legal-ai-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - legal-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FILE STORAGE & CDN
  # =============================================================================
  
  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: legal-ai-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - MINIO_DOMAIN=minio
      - MINIO_SERVER_URL=http://minio:9000
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - legal-ai-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: legal-ai-minio-init
    depends_on:
      - minio
    networks:
      - legal-ai-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/legal-documents;
      /usr/bin/mc policy download myminio/legal-documents;
      /usr/bin/mc mb myminio/processed-documents;
      /usr/bin/mc mb myminio/temp-uploads;
      exit 0;
      "

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: legal-ai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    networks:
      - legal-ai-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: legal-ai-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - legal-ai-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================
  
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: legal-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
      - logs:/var/log/nginx
    networks:
      - legal-ai-network
    depends_on:
      - frontend
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AI SERVICES (OPTIONAL)
  # =============================================================================
  
  # Local AI Model Server (Optional)
  ai-server:
    image: ollama/ollama:latest
    container_name: legal-ai-local-model
    ports:
      - "11434:11434"
    volumes:
      - ./models:/root/.ollama
    networks:
      - legal-ai-network
    restart: unless-stopped
    profiles:
      - local-ai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================
  
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: legal-ai-postgres-test
    environment:
      - POSTGRES_DB=legal_ai_test_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=testpass123
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - legal-ai-network
    profiles:
      - testing
    tmpfs:
      - /var/lib/postgresql/data

  # =============================================================================
  # BACKUP SERVICES
  # =============================================================================
  
  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: legal-ai-backup
    environment:
      - PGHOST=postgres
      - PGDATABASE=${POSTGRES_DB:-legal_ai_db}
      - PGUSER=${POSTGRES_USER:-postgres}
      - PGPASSWORD=${POSTGRES_PASSWORD:-legalai123}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - legal-ai-network
    depends_on:
      - postgres
    profiles:
      - backup
    command: >
      sh -c "
      chmod +x /backup.sh &&
      while true; do
        /backup.sh
        sleep 86400
      done
      "

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  # Adminer Database Management
  adminer:
    image: adminer:latest
    container_name: legal-ai-adminer
    ports:
      - "8080:8080"
    networks:
      - legal-ai-network
    depends_on:
      - postgres
    profiles:
      - development
    restart: unless-stopped

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: legal-ai-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - legal-ai-network
    depends_on:
      - redis
    profiles:
      - development
    restart: unless-stopped

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: legal-ai-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - legal-ai-network
    profiles:
      - development
    restart: unless-stopped